import React, { useContext , useEffect, useState}  from 'react'
import Button from '../../components/Button/Button'
import {UserPlusIcon} from '@heroicons/react/20/solid'
import './dash.css'
import ContactCard from '../../components/ContactCard/ContactCard'
import { userContext } from '../../context/UserContext'
import axios from 'axios'
import { Link, useNavigate , Outlet} from 'react-router-dom'
import Loader from '../../components/Loader/Loader'




function Dashboard() {
  const [contact, setContact] = useState([ ])
  const [isLoading, setIsloading]= useState(false)
  const {currentUser} = useContext(userContext)
 
  const navigate = useNavigate()

  // redirect to login page for any user who issnt logged in
  useEffect(()=> {
    if(!currentUser?.token){
      navigate('/directory/login')
    }
  }, []);

  useEffect(()=> {
      const fetchContacts = async ()=> {
        setIsloading(true)
        try {
          const response = await axios.get('http://localhost:8800/contacts/',{
            headers: {
              Authorization: `BEARER ${currentUser.token}`
            }
          } )
          setContact(response.data.data)
        
        } catch (error) {
          console.log(error)
        }

        setIsloading(false)

      }
      fetchContacts();
  },[])




  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:8800/contacts/${id}`);
      // Remove the deleted contact from the state
      setContact((prevContacts) => prevContacts.filter((contact) => contact._id !== id));
    } catch (error) {
      console.log(error);
      // Handle error here, show a notification, etc.
    }
  };
   


  if(isLoading){
    return <Loader />
  }


  return (
    <div>
        <nav>
            
      

        {/* After : Passed Accessbility check */}
            <Link to="/directory/create">


            <button 
            className='dash_btn' 
            title='Add Contact'>
                <UserPlusIcon className='addIcon' />
            </button>
            </Link>

         {currentUser?.token && ( <Link to="/directory/logout"><button>Logout</button></Link>)}
        </nav>
        <main>
            
         


      {contact?.length > 0 ? (
          <div>
            {contact.map(({ _id, ...rest }) => (
              <ContactCard key={_id} id={_id} {...rest} handleDelete={handleDelete} />
            ))}
          </div>
        ) : (
          <h1 className='no_contact'>No contact found ðŸ˜³</h1>
        )
      }


          </main>
        </div>
  )
          }

export default Dashboard